if(INSTALL_HERE) 
  # install in the home of the whole project
  if ( ${CMAKE_HOME_DIRECTORY} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR} )
    set(INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/lib")
  else()
    set(INSTALL_PREFIX "${CMAKE_HOME_DIRECTORY}/lib3rd")
  endif()
  set(PROJECT_PUBLIC_HEADER_DESTINATION "${INSTALL_PREFIX}/include")
else()
  set(INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/lib")
  set(PROJECT_PUBLIC_HEADER_DESTINATION "${INSTALL_PREFIX}/include")
endif()

#MESSAGE( STATUS "\n\n\nCMAKE_HOME_DIRECTORY     = ${CMAKE_HOME_DIRECTORY}\n\n\n")
#MESSAGE( STATUS "\n\n\nCMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}\n\n\n")
#MESSAGE( STATUS "\n\n\nINSTALL_PREFIX           = ${INSTALL_PREFIX}\n\n\n")

# INSTALL TARGETS
set(INSTALL_TARGETS ${STATIC_PROJECT})
if(BUILD_SHARED)
  set(INSTALL_TARGETS ${INSTALL_TARGETS} ${DYNAMIC_PROJECT})
endif()

# Current project scope target
install(
  TARGETS ${INSTALL_TARGETS}
  RUNTIME DESTINATION "${INSTALL_PREFIX}/bin"
  ARCHIVE DESTINATION "${INSTALL_PREFIX}/lib"
  LIBRARY DESTINATION "${INSTALL_PREFIX}/dll"
  PUBLIC_HEADER DESTINATION "${PROJECT_PUBLIC_HEADER_DESTINATION}/GenericContainer"
  #PRIVATE_HEADER DESTINATION "${PROJECT_PRIVATE_HEADER_DESTINATION}"
)
# Rapidjson target (exposed in public api)
install(
  TARGETS ${RAPIDJSON}
  PUBLIC_HEADER DESTINATION "${PROJECT_PUBLIC_HEADER_DESTINATION}/rapidjson"
)
install(
  TARGETS ${LUALIB}
  RUNTIME DESTINATION "${INSTALL_PREFIX}/bin"
  ARCHIVE DESTINATION "${INSTALL_PREFIX}/lib"
  LIBRARY DESTINATION "${INSTALL_PREFIX}/dll"
  PUBLIC_HEADER DESTINATION "${PROJECT_PUBLIC_HEADER_DESTINATION}/lua"
)

if(INSTALL_HERE)
  add_custom_command(
    TARGET ${STATIC_PROJECT} POST_BUILD
    COMMAND cmake  --build . --config Release  --target install
  )
endif()
